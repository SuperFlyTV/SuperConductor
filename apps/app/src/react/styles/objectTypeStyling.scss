@import './global.scss';

@mixin useObjectTypeStyles() {
	&.template {
		background: $templateLayerColor;
	}

	&.media {
		background: $mediaLayerColor;
	}

	&.me,
	&.OUTPUT,
	&.ME {
		background: $mixEffectLayerColor;
	}

	&.dsk,
	&.DSK {
		background: $downstreamKeyerLayerColor;
	}

	&.aux,
	&.EXTERNAL,
	&.MIX_OUTPUT,
	&.MATRIX_OUTPUT {
		background: $auxiliaryLayerColor;
	}

	&.ssrc {
		background: $superSourceLayerColor;
	}

	&.ssrcProps {
		background: $superSourcePropsLayerColor;
	}

	&.macroPlayer {
		background: $macroPlayerLayerColor;
	}

	&.audioChan,
	&.AUDIO_CHANNEL {
		background: $audioLayerColor;
	}

	&.mp {
		background: $mediaPlayerLayerColor;
	}

	&.CURRENT_SCENE {
		background: $currentSceneLayerColor;
	}

	&.CURRENT_TRANSITION {
		background: $currentTransitionLayerColor;
	}

	&.MUTE {
		background: $muteLayerColor;
	}

	&.RECORDING {
		background: $recordingLayerColor;
	}

	&.SCENE_ITEM_RENDER {
		background: $sceneItemRenderLayerColor;
	}

	&.STREAMING {
		background: $streamingLayerColor;
	}

	&.SOURCE_SETTINGS {
		background: $sourceSettingsLayerColor;
	}

	&.INPUT {
		background: $inputLayerColor;
	}

	&.PROGRAM {
		background: $programLayerColor;
	}

	&.AUDIO {
		background: $audioLayerColor;
	}

	&.OVERLAY {
		background: $overlayLayerColor;
	}

	&.FADE_TO_BLACK {
		background: $fadeToBlackLayerColor;
	}

	&.FADER {
		background: $videoFaderLayerColor;
	}

	&.PREVIEW {
		background: $previewLayerColor;
	}

	&.osc {
		background: $oscLayerColor;
	}

	&.http_request,
	&.post,
	&.get,
	&.put,
	&.delete {
		background: $httpLayerColor;
	}

	&.transport {
		background: $transportLayerColor;
	}
}
